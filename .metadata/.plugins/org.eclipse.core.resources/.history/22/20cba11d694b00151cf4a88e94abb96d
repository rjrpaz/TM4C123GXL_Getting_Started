#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/sysctl.h"
#include "driverlib/gpio.h"
#include "buttons.h"

#define APP_BUTTON_POLL_DIVIDER          8


#define LEFT_BUTTON             GPIO_PIN_4
#define RIGHT_BUTTON            GPIO_PIN_0
#define BUTTONS_GPIO_BASE       GPIO_PORTF_BASE
#define ALL_BUTTONS             (LEFT_BUTTON | RIGHT_BUTTON)

#define	FALSE	0
#define	TRUE	1

uint8_t ui8PinData=2;
uint32_t ui32Buttons=0, ui32ButtonsAnterior=0;
bool onOff = FALSE;
bool BotonEncender=FALSE, BotonEncenderAnterior=FALSE;
bool BotonPosicion=FALSE, BotonPosicionAnterior=FALSE;

uint8_t ui8PinAnterior=0;

bool AntiRebote (uint32_t, bool);

int main(void)
{
	// Selecciona un cristal de 16 Mhz.
	// Además selecciona el PLL de 400Mhz. Dividida por 2 (esto es por defecto), esta es la frecuencia de uso.
	// Además divide por 5 la salida del PLL.
	// La frecuencia resultante es de 40 Mhz.
	SysCtlClockSet(SYSCTL_SYSDIV_5|SYSCTL_USE_PLL|SYSCTL_XTAL_16MHZ|SYSCTL_OSC_MAIN);

	// Antes de realizar llamadas a alguna función definida
	// en la librería "driverlib", debemos habilitar el reloj
	// para el GPIO que vayamos a utilizar.
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);

	// Define los tres pines del puerto F conectados a los leds, como salidas
	GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);

	// Define los tres pines del puerto F conectados a los switch, como entrada
//	GPIOPinTypeGPIOInput(GPIO_PORTF_BASE, LEFT_BUTTON|RIGHT_BUTTON);
	ButtonsInit();


	while(1)
	{
		// Almaceno el valor de los botones
//		ui32Buttons = GPIOPinRead(BUTTONS_GPIO_BASE, ALL_BUTTONS);
//		BotonEncender = AntiRebote(LEFT_BUTTON, BotonEncenderAnterior);
	    ui32Buttons = ButtonsPoll(0,0);

	    AppButtonHandler();

		// Botón izquierdo prende y apaga leds
	    if (!BotonEncenderAnterior && BotonEncender) {
	    	if (onOff) {
	    		// Apaga el led
	    		GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, 0x00);
	    		onOff = 0;
	    	} else {
	    		// Prende el led
	    		GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, ui8PinData);
	    		onOff = 1;
	    	}

	    }

		BotonPosicion = AntiRebote(RIGHT_BUTTON, BotonPosicionAnterior);
	    // Botón derecho cambia de color
	    if (!BotonPosicionAnterior && BotonPosicion) {
	    	if(ui8PinData==8) {
	    		ui8PinData=2;
	    	} else {
	    		ui8PinData=ui8PinData*2;
	    	}
	    }
	    BotonEncenderAnterior=BotonEncender;
	    BotonPosicionAnterior=BotonPosicion;
	}
}


void
AppButtonHandler(void)
{
    static uint32_t ui32TickCounter;

    ui32TickCounter++;

    //
    // Switch statement to adjust the color wheel position based on buttons
    //
    switch(ui32Buttons & ALL_BUTTONS)
    {

    case LEFT_BUTTON:

        //
        // Check if the button has been held int32_t enough to peform another
        // color wheel increment.
        //
        if((ui32TickCounter % APP_BUTTON_POLL_DIVIDER) == 0)
        {
            //
            // Perform the increment and index wrap around.
            //
            g_sAppState.ui32ManualIndex++;
            if(g_sAppState.ui32ManualIndex >= APP_NUM_MANUAL_COLORS)
            {
                g_sAppState.ui32ManualIndex = 0;
            }
            g_sAppState.fColorWheelPos = APP_PI *
                                      fManualColors[g_sAppState.ui32ManualIndex];
        }

        //
        // Reset some state counts and system mode so that we know the user
        // is present and actively engaging with the application.
        //
        ui32HibModeEntryCount = 0;
        g_sAppState.ui32ModeTimer = 0;
        break;

    case RIGHT_BUTTON:

        //
        // Check if the button has been held int32_t enough to perform another
        // color wheel decrement.
        //
        if((ui32TickCounter % APP_BUTTON_POLL_DIVIDER) == 0)
        {
            //
            // Perform the decrement and index wrap around.
            //
            if(g_sAppState.ui32ManualIndex == 0)
            {
                //
                // set to one greater than the last color so that we decrement
                // back into range with next instruction.
                //
                g_sAppState.ui32ManualIndex = APP_NUM_MANUAL_COLORS;
            }
            g_sAppState.ui32ManualIndex--;
            g_sAppState.fColorWheelPos = APP_PI *
                                      fManualColors[g_sAppState.ui32ManualIndex];
        }
        //
        // Reset some state counts and system mode so that we know the user
        // is present and actively engaging with the application.
        //
        ui32HibModeEntryCount = 0;
        g_sAppState.ui32ModeTimer = 0;
        g_sAppState.ui32Mode = APP_MODE_NORMAL;
        break;

    }
}
